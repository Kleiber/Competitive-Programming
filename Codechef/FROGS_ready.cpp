/**
*  Generated by tpp tool
*  File: FROGS.cpp
*  Created: 06-02-2021 11:14:05
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
using namespace std;


struct frog {
    int weight;
    int distance;
    int pos;
};

bool order(frog f1, frog f2) {
    if(f1.weight < f2.weight) return 1;
    else return 0;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int T;
    cin>>T;

    while(T--) {
        int N;
        cin>>N;

        vector<frog> V(N);
        for(int i = 0; i < N; i++) {
            cin>>V[i].weight;
            V[i].pos = i + 1;
        }

        for(int i = 0; i < N; i++) cin>>V[i].distance;
        
        sort(V.begin(), V.end(), order);

        int ans =0;
        for(int i = 0; i < N; i++) {
            if(i == 0) continue;
            if(V[i].pos > V[i - 1].pos) continue;

            int diff = abs(V[i - 1].pos - V[i].pos);
            int jumps = diff/V[i].distance + (diff % V[i].distance != 0? 1 : 0);
            if(diff % V[i].distance == 0) jumps++;

            V[i].pos = V[i].pos + jumps*V[i].distance;
            ans += jumps;
        }

        cout<<ans<<endl;
    }

    return 0;
}
