/**
*  Generated by tpp tool
*  File: countingstars.cpp
*  Created: 06-10-2020 20:05:52
**/

#include <bits/stdc++.h>
#define MAX 105
#define MOV 4
using namespace std;


int m, n;
vector<string> sky;
bool visited[MAX][MAX];
int dr[MOV] = {-1, 0, 1, 0};
int dc[MOV] = {0, 1, 0, -1};

bool isValid(int r, int c) {
	return r >= 0 && r < m && c >= 0 && c < n;
}

void dfs(int r, int c) {
	visited[r][c] = 1;
	for(int i = 0; i < MOV; i++) {
		int nr = r + dr[i];
		int nc = c + dc[i];
		if(isValid(nr, nc) && sky[nr][nc] == '-' && !visited[nr][nc]) dfs(nr, nc);
	}
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int cases = 0;
    while(cin>>m>>n) {
    	cases++;
    	memset(visited, 0, sizeof(visited));

    	sky = vector<string>(m);
    	for(int i = 0; i < m; i++) cin>>sky[i];

    	int cont = 0;
    	for(int r = 0; r < m; r++) {
    		for(int c = 0; c < n; c++) {
    			if(sky[r][c] == '-' && !visited[r][c]) {
    				cont++;
    				dfs(r, c);
    			}
    		}
    	}

    	cout<<"Case "<<cases<<": "<<cont<<endl;
    }

    return 0;
}
