#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class NextOlympics {
public:

	int countLeapYears(int y, int m) {
		int years = y;
		if (m <= 2) years--;
		return years/4 - years/100 + years/400; 
	}
	
	int toInt(string  s) {
		stringstream in(s);
		int ans;
		in>>ans;
		return ans;
	}
	
	int countDays(string today) {
		vector<string> V(3);
		int k = 0;
		string aux = "";
		for(int i = 0; i < today.size(); i++) {
			if(today[i] == '.'){
				V[k] = aux;
				k++;
				aux = "";
			}
			else aux += today[i];
		}
		V[k] = aux;
	
		int y2 = 2021;
		int m2 = 7;
		int d2 = 23;
		
		int y1 = toInt(V[0]);
		int m1 = toInt(V[1]);
		int d1 = toInt(V[2]);
	
		int monthDays[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		long int n1 = y1*365 + d1; 
		for(int i = 0; i < m1 - 1; i++) n1 += monthDays[i];
		n1 += countLeapYears(y1, m1);
		
		long int n2 = y2*365 + d2;
		for(int i = 0; i < m2 - 1; i++) n2 += monthDays[i];
		n2 += countLeapYears(y2, m2); 
		
		int ans = n2 - n1;
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	NextOlympics *obj;
	int answer;
	obj = new NextOlympics();
	clock_t startTime = clock();
	answer = obj->countDays(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "2020.07.24";
	p1 = 364;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "2020.11.09";
	p1 = 256;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "2021.02.25";
	p1 = 148;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "2021.07.23";
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "2020.12.31";
	p1 = 204;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "2021.01.01";
	p1 = 203;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
